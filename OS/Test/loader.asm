[BITS 16]	                        ; Указываем ассемблеру, что это 16-битный код
[ORG 0x7C00]	                    ; Указываем ассемблеру, что код будет загружен по адресу 0x7C00

MOV SI, HelloString                 ; Загружаем указатель на строку в регистр SI
CALL PrintString	                ; Вызываем процедуру печати строки
JMP $ 		                        ; Бесконечный цикл, останавливаем выполнение

PrintCharacter:	                    ; Процедура для печати символа на экране
	                                ; Предполагается, что ASCII значение символа находится в регистре AL
MOV AH, 0x0E	                    ; Указываем BIOS, что нужно напечатать символ на экране
MOV BH, 0x00	                    ; Номер страницы
MOV BL, 0x07	                    ; Атрибут текста: серый на черном фоне

INT 0x10	                        ; Вызываем видео прерывание
RET		                            ; Возвращаемся в вызывающую процедуру

PrintString:	                    ; Процедура для печати строки на экране
	                                ; Предполагается, что указатель на начало строки находится в регистре SI

next_character:	                    ; Метка для получения следующего символа из строки
MOV AL, [SI]	                    ; Получаем байт из строки и сохраняем в AL
INC SI		                        ; Увеличиваем указатель SI
OR AL, AL	                        ; Проверяем, является ли значение в AL нулем (конец строки)
JZ exit_function                    ; Если конец строки, возвращаемся
CALL PrintCharacter                 ; Иначе печатаем символ, который находится в AL
JMP next_character	                ; Получаем следующий символ из строки
exit_function:	                    ; Метка конца
RET		                            ; Возвращаемся из процедуры

; Данные
HelloString db 'Hello Woowz', 0	    ; Строка "Hello Woowz", заканчивающаяся нулем

TIMES 510 - ($ - $$) db 0	        ; Заполняем оставшуюся часть сектора нулями
DW 0xAA55			                ; Добавляем сигнатуру загрузки в конец загрузчика
